//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Attacks/Inputs_2P.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs_2P: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs_2P()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs_2P"",
    ""maps"": [
        {
            ""name"": ""BaseCombat"",
            ""id"": ""492f226e-e023-4f8c-90a0-ef1706cf62da"",
            ""actions"": [
                {
                    ""name"": ""Kick1"",
                    ""type"": ""Button"",
                    ""id"": ""9cee80d6-6fa2-494e-acff-bf23ecad585f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Punch1"",
                    ""type"": ""Button"",
                    ""id"": ""641565f0-0213-4efa-872a-6db75b71ae5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c125b1b8-cb99-47c8-8adf-0bfbe781f6c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3aeca417-8064-4492-9b59-1412ad26cf52"",
                    ""path"": ""<Keyboard>/numpad0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24239191-fc6d-4845-ac50-b67d99df6e66"",
                    ""path"": ""<Keyboard>/numpad1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""816f8e89-57a5-498d-8f12-fdad90d58e13"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // BaseCombat
        m_BaseCombat = asset.FindActionMap("BaseCombat", throwIfNotFound: true);
        m_BaseCombat_Kick1 = m_BaseCombat.FindAction("Kick1", throwIfNotFound: true);
        m_BaseCombat_Punch1 = m_BaseCombat.FindAction("Punch1", throwIfNotFound: true);
        m_BaseCombat_Jump = m_BaseCombat.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BaseCombat
    private readonly InputActionMap m_BaseCombat;
    private List<IBaseCombatActions> m_BaseCombatActionsCallbackInterfaces = new List<IBaseCombatActions>();
    private readonly InputAction m_BaseCombat_Kick1;
    private readonly InputAction m_BaseCombat_Punch1;
    private readonly InputAction m_BaseCombat_Jump;
    public struct BaseCombatActions
    {
        private @Inputs_2P m_Wrapper;
        public BaseCombatActions(@Inputs_2P wrapper) { m_Wrapper = wrapper; }
        public InputAction @Kick1 => m_Wrapper.m_BaseCombat_Kick1;
        public InputAction @Punch1 => m_Wrapper.m_BaseCombat_Punch1;
        public InputAction @Jump => m_Wrapper.m_BaseCombat_Jump;
        public InputActionMap Get() { return m_Wrapper.m_BaseCombat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseCombatActions set) { return set.Get(); }
        public void AddCallbacks(IBaseCombatActions instance)
        {
            if (instance == null || m_Wrapper.m_BaseCombatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BaseCombatActionsCallbackInterfaces.Add(instance);
            @Kick1.started += instance.OnKick1;
            @Kick1.performed += instance.OnKick1;
            @Kick1.canceled += instance.OnKick1;
            @Punch1.started += instance.OnPunch1;
            @Punch1.performed += instance.OnPunch1;
            @Punch1.canceled += instance.OnPunch1;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IBaseCombatActions instance)
        {
            @Kick1.started -= instance.OnKick1;
            @Kick1.performed -= instance.OnKick1;
            @Kick1.canceled -= instance.OnKick1;
            @Punch1.started -= instance.OnPunch1;
            @Punch1.performed -= instance.OnPunch1;
            @Punch1.canceled -= instance.OnPunch1;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IBaseCombatActions instance)
        {
            if (m_Wrapper.m_BaseCombatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBaseCombatActions instance)
        {
            foreach (var item in m_Wrapper.m_BaseCombatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BaseCombatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BaseCombatActions @BaseCombat => new BaseCombatActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IBaseCombatActions
    {
        void OnKick1(InputAction.CallbackContext context);
        void OnPunch1(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
