//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Attacks/Inputs_1P.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs_1P: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs_1P()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs_1P"",
    ""maps"": [
        {
            ""name"": ""BaseCombat2"",
            ""id"": ""3b3b5a33-53f5-402c-a90e-4430bad74836"",
            ""actions"": [
                {
                    ""name"": ""Jump1"",
                    ""type"": ""Button"",
                    ""id"": ""6a9c8c6d-a0e8-4151-a12b-146f67da6472"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Kick2"",
                    ""type"": ""Button"",
                    ""id"": ""3aaf60e8-5a28-4d43-a33b-4c3435fc9bd2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Punch2"",
                    ""type"": ""Button"",
                    ""id"": ""58e4ec70-ed9b-4ad7-abf2-72365b8bb20e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""38f715b9-dde8-4466-b98a-f5456e39e230"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41e6ad0e-477e-41bf-acca-96657f2fca5a"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2754de1-b4ee-478f-bfae-e301782f1261"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BaseCombat2
        m_BaseCombat2 = asset.FindActionMap("BaseCombat2", throwIfNotFound: true);
        m_BaseCombat2_Jump1 = m_BaseCombat2.FindAction("Jump1", throwIfNotFound: true);
        m_BaseCombat2_Kick2 = m_BaseCombat2.FindAction("Kick2", throwIfNotFound: true);
        m_BaseCombat2_Punch2 = m_BaseCombat2.FindAction("Punch2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BaseCombat2
    private readonly InputActionMap m_BaseCombat2;
    private List<IBaseCombat2Actions> m_BaseCombat2ActionsCallbackInterfaces = new List<IBaseCombat2Actions>();
    private readonly InputAction m_BaseCombat2_Jump1;
    private readonly InputAction m_BaseCombat2_Kick2;
    private readonly InputAction m_BaseCombat2_Punch2;
    public struct BaseCombat2Actions
    {
        private @Inputs_1P m_Wrapper;
        public BaseCombat2Actions(@Inputs_1P wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump1 => m_Wrapper.m_BaseCombat2_Jump1;
        public InputAction @Kick2 => m_Wrapper.m_BaseCombat2_Kick2;
        public InputAction @Punch2 => m_Wrapper.m_BaseCombat2_Punch2;
        public InputActionMap Get() { return m_Wrapper.m_BaseCombat2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseCombat2Actions set) { return set.Get(); }
        public void AddCallbacks(IBaseCombat2Actions instance)
        {
            if (instance == null || m_Wrapper.m_BaseCombat2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BaseCombat2ActionsCallbackInterfaces.Add(instance);
            @Jump1.started += instance.OnJump1;
            @Jump1.performed += instance.OnJump1;
            @Jump1.canceled += instance.OnJump1;
            @Kick2.started += instance.OnKick2;
            @Kick2.performed += instance.OnKick2;
            @Kick2.canceled += instance.OnKick2;
            @Punch2.started += instance.OnPunch2;
            @Punch2.performed += instance.OnPunch2;
            @Punch2.canceled += instance.OnPunch2;
        }

        private void UnregisterCallbacks(IBaseCombat2Actions instance)
        {
            @Jump1.started -= instance.OnJump1;
            @Jump1.performed -= instance.OnJump1;
            @Jump1.canceled -= instance.OnJump1;
            @Kick2.started -= instance.OnKick2;
            @Kick2.performed -= instance.OnKick2;
            @Kick2.canceled -= instance.OnKick2;
            @Punch2.started -= instance.OnPunch2;
            @Punch2.performed -= instance.OnPunch2;
            @Punch2.canceled -= instance.OnPunch2;
        }

        public void RemoveCallbacks(IBaseCombat2Actions instance)
        {
            if (m_Wrapper.m_BaseCombat2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBaseCombat2Actions instance)
        {
            foreach (var item in m_Wrapper.m_BaseCombat2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BaseCombat2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BaseCombat2Actions @BaseCombat2 => new BaseCombat2Actions(this);
    public interface IBaseCombat2Actions
    {
        void OnJump1(InputAction.CallbackContext context);
        void OnKick2(InputAction.CallbackContext context);
        void OnPunch2(InputAction.CallbackContext context);
    }
}
